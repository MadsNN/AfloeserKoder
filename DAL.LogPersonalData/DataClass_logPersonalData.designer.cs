#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.LogPersonalData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LogPersondataTraek")]
	public partial class DataClass_logPersonalDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogAfloeserAeH(LogAfloeserAeH instance);
    partial void UpdateLogAfloeserAeH(LogAfloeserAeH instance);
    partial void DeleteLogAfloeserAeH(LogAfloeserAeH instance);
    #endregion
		
		public DataClass_logPersonalDataDataContext() : 
				base(global::DAL.LogPersonalData.Properties.Settings.Default.LogPersondataTraekConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClass_logPersonalDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClass_logPersonalDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClass_logPersonalDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClass_logPersonalDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LogAfloeserAeH> LogAfloeserAeHs
		{
			get
			{
				return this.GetTable<LogAfloeserAeH>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="afloeser.LogAfloeserAeH")]
	public partial class LogAfloeserAeH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _systemID;
		
		private string _samaccountName;
		
		private string _dataAccessed;
		
		private string _reasonForAccessingData;
		
		private System.DateTime _dataAccessedDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsystemIDChanging(int value);
    partial void OnsystemIDChanged();
    partial void OnsamaccountNameChanging(string value);
    partial void OnsamaccountNameChanged();
    partial void OndataAccessedChanging(string value);
    partial void OndataAccessedChanged();
    partial void OnreasonForAccessingDataChanging(string value);
    partial void OnreasonForAccessingDataChanged();
    partial void OndataAccessedDateTimeChanging(System.DateTime value);
    partial void OndataAccessedDateTimeChanged();
    #endregion
		
		public LogAfloeserAeH()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int systemID
		{
			get
			{
				return this._systemID;
			}
			set
			{
				if ((this._systemID != value))
				{
					this.OnsystemIDChanging(value);
					this.SendPropertyChanging();
					this._systemID = value;
					this.SendPropertyChanged("systemID");
					this.OnsystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_samaccountName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string samaccountName
		{
			get
			{
				return this._samaccountName;
			}
			set
			{
				if ((this._samaccountName != value))
				{
					this.OnsamaccountNameChanging(value);
					this.SendPropertyChanging();
					this._samaccountName = value;
					this.SendPropertyChanged("samaccountName");
					this.OnsamaccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataAccessed", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string dataAccessed
		{
			get
			{
				return this._dataAccessed;
			}
			set
			{
				if ((this._dataAccessed != value))
				{
					this.OndataAccessedChanging(value);
					this.SendPropertyChanging();
					this._dataAccessed = value;
					this.SendPropertyChanged("dataAccessed");
					this.OndataAccessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reasonForAccessingData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string reasonForAccessingData
		{
			get
			{
				return this._reasonForAccessingData;
			}
			set
			{
				if ((this._reasonForAccessingData != value))
				{
					this.OnreasonForAccessingDataChanging(value);
					this.SendPropertyChanging();
					this._reasonForAccessingData = value;
					this.SendPropertyChanged("reasonForAccessingData");
					this.OnreasonForAccessingDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataAccessedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime dataAccessedDateTime
		{
			get
			{
				return this._dataAccessedDateTime;
			}
			set
			{
				if ((this._dataAccessedDateTime != value))
				{
					this.OndataAccessedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._dataAccessedDateTime = value;
					this.SendPropertyChanged("dataAccessedDateTime");
					this.OndataAccessedDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
